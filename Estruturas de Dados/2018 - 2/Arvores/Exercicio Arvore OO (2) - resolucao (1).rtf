{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fmodern\fcharset0 CourierNewPS-BoldMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17200\viewh13040\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 template<class T>\
int ABB<T>::nivel() \{\
    return nivel(this->raiz);\
\}\
\
template<class T>\
int ABB<T>::nivel(Nodo<T>* raiz) \{\
    if (raiz == NULL)\
        return 0;\
    else\
        return (nivel(raiz->retornaSubArvoreEsquerda()) >\
            nivel(raiz->retornaSubArvoreDireita())) ?\
        (nivel(raiz->retornaSubArvoreEsquerda()) + 1) :\
        (nivel(raiz->retornaSubArvoreDireita()) + 1);\
\}\
\
template<class T>\
T ABB<T>::soma() \{\
    return soma(this->raiz);\
\}\
\
template<class T>\
T ABB<T>::soma(Nodo<T>* raiz) \{\
    if (raiz != NULL)\
        return raiz->retornaElemento() + soma(raiz->retornaSubArvoreEsquerda())\
        + soma(raiz->retornaSubArvoreDireita());\
    else\
        return 0;\
\}\
\
template<class T>\
void ABB<T>::multiplica(T elemento) \{\
    multiplica(this->raiz, elemento);\
\}\
\
template<class T>\
void ABB<T>::multiplica(Nodo<T>* raiz, T elemento) \{\
    if (raiz != NULL) \{\
        raiz->retornaElemento() *= elemento;\
        multiplica(raiz->retornaSubArvoreEsquerda(), elemento);\
        multiplica(raiz->retornaSubArvoreDireita(), elemento);\
    \}\
\}\
\
template<class T>\
int ABB<T>::numeroDeSubArvores(T elemento) \{\
    Nodo<T>* nodo = this->raiz;\
\
    while (nodo->retornaElemento() != elemento)\
        if (elemento > nodo->retornaElemento())\
            nodo = nodo->retornaSubArvoreDireita();\
        else\
            nodo = nodo->retornaSubArvoreEsquerda();\
    if ((nodo->retornaSubArvoreEsquerda() == NULL) && (nodo->retornaSubArvoreDireita() == NULL))\
        return 0;\
    else\
        if ((nodo->retornaSubArvoreEsquerda() != NULL) && (nodo->retornaSubArvoreDireita() != NULL))\
        return 2;\
    else\
        return 1;\
\}\
\
template<class T>\
T ABB<T>::multiplicaImpares() \{\
    return multiplicaImpares(this->raiz);\
\}\
\
template<class T>\
T ABB<T>::multiplicaImpares(Nodo<T>* raiz) \{\
    if (raiz == NULL)\
        return 1;\
    else\
        if (raiz->retornaElemento() % 2 == 1)\
        return raiz->retornaElemento() *\
            multiplicaImpares(raiz->retornaSubArvoreEsquerda()) *\
        multiplicaImpares(raiz->retornaSubArvoreDireita());\
    else\
        return 1 *\
        multiplicaImpares(raiz->retornaSubArvoreEsquerda()) *\
        multiplicaImpares(raiz->retornaSubArvoreDireita());\
\}\
\
template<class T>\
void ABB<T>::mostraOsComApenasSubArvoreDireita() \{\
    mostraOsComApenasSubArvoreDireita(this->raiz);\
\}\
\
template<class T>\
void ABB<T>::mostraOsComApenasSubArvoreDireita(Nodo<T>* raiz) \{\
    if (raiz != NULL) \{\
        if ((raiz->retornaSubArvoreEsquerda() == NULL) && (raiz->retornaSubArvoreDireita() != NULL))\
            cout << raiz->retornaElemento();\
        mostraOsComApenasSubArvoreDireita(raiz->retornaSubArvoreEsquerda());\
        mostraOsComApenasSubArvoreDireita(raiz->retornaSubArvoreDireita());\
    \}\
\}\
}